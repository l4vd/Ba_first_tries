import re
import pandas as pd

superstar_var_df = pd.DataFrame(columns=['Filename', 'Features', 'Accuracy', 'Precision', 'Recall', 'F1-Score', 'ROC AUC', 'Weighted Accuracy', 'Macro F1 Score'])

for filename in range(16):
    important_values = {}
    
    important_values["Filename"] = filename
    ##the following excerpt was generated by chat gpt
    with open(f"end_comb/output_{filename}.txt", "r") as file:
        lines = file.readlines()
        for index, line in enumerate(lines):
            # Extracting feature names
            if line.startswith("Index"):
                #not gen start
                features = line
                count = 1
                while True:
                    features = features + lines[index+count]
                    if "]" in lines[index+count]: 
                        break
                    count += 1
                features = features.replace("Index(", "")
                features = features[:-2]
                important_values["Features"] = features
                #not gen end
    
            # Extracting accuracy
            if line.startswith("Accuracy"):
                accuracy = float(line.split(":")[1])
                important_values["Accuracy"] = accuracy
    
            # Extracting confusion matrix values
            if "True Negatives" in line:
                #not gen start
                important_values["TN"] = lines[index].replace("True Negatives (TN):", "").replace("\n", "")
                important_values["FP"] = lines[index+1].replace("False Positives (FP):", "").replace("\n", "")
                important_values["FN"] = lines[index+2].replace("False Negatives (FN):", "").replace("\n", "")
                important_values["TP"] = lines[index+3].replace("True Positives (TP):", "").replace("\n", "")
                #not gen end
    
            # Extracting precision, recall, and F1-score
            if "Precision:0" in line:
                precision = float(re.search(r"\d+\.\d+", line).group())
                recall = float(re.search(r"\d+\.\d+", lines[lines.index(line) + 1]).group())
                f1_score = float(re.search(r"\d+\.\d+", lines[lines.index(line) + 2]).group())
                important_values["Precision"] = precision
                important_values["Recall"] = recall
                important_values["F1-Score"] = f1_score
    
            # Extracting ROC AUC
            if "ROC AUC" in line:
                roc_auc = float(re.search(r"\d+\.\d+", line).group())
                important_values["ROC AUC"] = roc_auc
    
            # Extracting weighted accuracy
            if "Weighted Accuracy" in line:
                weighted_accuracy = float(re.search(r"\d+\.\d+", line).group())
                important_values["Weighted Accuracy"] = weighted_accuracy
    
            # Extracting macro F1 score
            if "Macro F1 Score" in line:
                macro_f1_score = float(re.search(r"\d+\.\d+", line).group())
                important_values["Macro F1 Score"] = macro_f1_score
    ##end of the generated
    
    # Convert dictionary to DataFrame
    df = pd.DataFrame([important_values])
    superstar_var_df = pd.concat([superstar_var_df, df], axis=0)


superstar_var_df.sort_values(by=["Precision"], ascending=[False], inplace=True)

superstar_var_df["Features"] = superstar_var_df["Features"].apply(lambda x: eval(x))

default_columns = set(superstar_var_df[superstar_var_df["Filename"] == 0]["Features"].iloc[0])

superstar_var_df["newcol"] = superstar_var_df["Features"].apply(lambda x: list(set(x) - default_columns))

print(superstar_var_df[["newcol", "Recall", "Precision", "ROC AUC", "Macro F1 Score"]].head(10))

(superstar_var_df[["Filename", "newcol", "Recall", "Precision", "ROC AUC", "Macro F1 Score"]].head(10)).to_csv("end_comb/eval_end_comb_res.csv", sep="\t", index=False)

print()
print("check if single vars are correct: ")

def check_length(row):
    if len(row["newcol"]) == 1:
        print(row[["newcol", "Recall", "Precision", "ROC AUC", "Macro F1 Score"]])
    return row  # You need to return the row to maintain the DataFrame structure

superstar_var_df.apply(check_length, axis=1)